version: '3.4'
name: realestate-microservices

networks:
  backend:
    driver: bridge

services:
# API GATEWAY
  api-gateway:
    container_name: api-gateway
    environment:
       - ASPNETCORE_ENVIRONMENT=Development
       - "ElasticConfiguration:Uri=http://elasticsearch:9200"
    image: ${DOCKER_REGISTRY-}api-gateway
    build:
      context: .
      dockerfile: RealEstate.ApiGateway/Dockerfile
    ports:
      - 9000:9000
    networks: 
      - backend 


# MICROSERVICES
# Clients Microservice
  api.clients:
    container_name: api.clients
    image: ${DOCKER_REGISTRY-}api.clients
    build:
      context: .
      dockerfile: Microservices/ClientsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 9001:9001
  
# Contracts Microservice
  api.contracts:
    container_name: api.contracts
    image: ${DOCKER_REGISTRY-}api.contracts
    build:
      context: .
      dockerfile: Microservices/ContractsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 9002:9002

# Estates Microservice
  api.estates:
    container_name: api.estates
    image: ${DOCKER_REGISTRY-}api.estates
    build:
      context: .
      dockerfile: Microservices/EstatesMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 9003:9003

# External APIs Microservice :9004
  api.external:
    container_name: api.external
    image: ${DOCKER_REGISTRY-}api.external
    build:
      context: .
      dockerfile: Microservices/ExternalAPIsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 9004:9004

# Listings Microservice
  api.listings:
    container_name: api.listings
    image: ${DOCKER_REGISTRY-}api.listings
    build:
      context: .
      dockerfile: Microservices/ListingsMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 9005:9005

# Messaging Microservice
  api.messaging:
    container_name: api.messaging
    image: ${DOCKER_REGISTRY-}api.messaging
    build:
      context: .
      dockerfile: Microservices/MessagingMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 9006:9006

# Utilities Microservice
  api.utilities:
    container_name: api.utilities
    image: ${DOCKER_REGISTRY-}api.utilities
    build:
      context: .
      dockerfile: Microservices/UtilitiesMicroservice/Dockerfile
    networks: 
      - backend 
    ports:
      - 9007:9007



# DATABASES: PostgreSQL + Keycloak + Redis
  db.clients:
    container_name: db.clients
    environment:
      - POSTGRES_USER=clients
      - POSTGRES_PASSWORD=clients
      - POSTGRES_DB=Clients
    restart: always
    ports:
        - "5001:5001"
    volumes:
      - clients_data:/var/lib/postgresql/clients/

  db.contracts:
    container_name: db.contracts
    environment:
      - POSTGRES_USER=contracts
      - POSTGRES_PASSWORD=contracts
      - POSTGRES_DB=Contracts
    restart: always
    ports:
        - "5002:5002"
    volumes:
      - contracts_data:/var/lib/postgresql/contracts/

  db.estates:
    container_name: db.estates
    environment:
      - POSTGRES_USER=estates
      - POSTGRES_PASSWORD=estates
      - POSTGRES_DB=Estates
    restart: always
    ports:
        - "5003:5003"
    volumes:
      - estates_data:/var/lib/postgresql/estates/


  db.listings:
    container_name: db.listings
    environment:
      - POSTGRES_USER=listings
      - POSTGRES_PASSWORD=listings
      - POSTGRES_DB=Listings
    restart: always
    ports:
        - "5005:5005"
    volumes:
      - listings_data:/var/lib/postgresql/listings/


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:19.0.1
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: [ 'start-dev' ]
    ports:
      - 8080:8080

  db.messages:
    container_name: db.messages
    restart: always    
    ports:
      - "6379:6379"


# UTILITIES:
  util.rabbitmq:
    container_name: util.rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672

  util.pgadmin:
    container_name: util.pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin

  util.portainer:
    container_name: util.portainer
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data


#Logging stack:
  util.elasticsearch:
    container_name: util.elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data   

  util.kibana:
    container_name: util.kibana
    environment:        
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - util.elasticsearch
    ports:
      - "5601:5601"  











# =================== Unused / Testing Containers below ==========================

# Keycloak using external Postgres DB:
  #db.postgresql:
  #  container_name: db.postgresql
  #  image: postgres:13.3
  #  environment:
  #    POSTGRES_DB: "keycloak"
  #    POSTGRES_USER: "keycloak"
  #    POSTGRES_PASSWORD: "password"
  #    PGDATA: "/var/lib/postgresql/data/pgdata"
  #  volumes:
  #    - ../2. Init Database:/docker-entrypoint-initdb.d
  #    - .:/var/lib/postgresql/data
  #  ports:
  #    - "5432:5432"
  #  restart: unless-stopped

  #keycloak:
  #  container_name: keycloak
  #  image: quay.io/keycloak/keycloak:19.0.1
  #  volumes:
  #    - ./keycloak/imports:/keycloak/imports
  #  environment:
  #    KEYCLOAK_LOGLEVEL: DEBUG
  #    ROOT_LOGLEVEL: DEBUG
  #    # KEYCLOAK_IMPORT: /keycloak/imports/realm-export.json
  #    DB_VENDOR: POSTGRES
  #    DB_ADDR: db.postgresql
  #    DB_DATABASE: keycloak
  #    DB_USER: keycloak
  #    DB_SCHEMA: public
  #    DB_PASSWORD: password
  #    KEYCLOAK_USER: admin
  #    KEYCLOAK_PASSWORD: Pa55w0rd
  #    # KEYCLOAK_FRONTEND_URL: http://keycloak.local.dev
  #  ports:
  #    - 8080:8080
  #  depends_on:
  #    - db.postgresql











## MicroDatabases: Not keeping the MicroDBs / consolidating them into one
#  db.estates:
#    container_name: db.estates
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=EstatesDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5010:5010'

#  db.contracts:
#    container_name: db.ontracts
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=ContractsDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5013:5013'

#  db.clients:
#    container_name: db.clients
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=ClientsDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5012:5012'

#  db.listings:
#    container_name: db.listings
#    image: postgres:14.1-alpine
#    restart: always
#    environment:
#      - POSTGRES_DB=ListingsDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5011:5011'

#  db.identity:
#    container_name: db.identity
#    image: postgres:14.1-alpine
#    restart: always
#    networks:
#      - backend
#    environment:
#      - POSTGRES_DB=IdentityDB
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=admin
#    ports:
#      - '5014:5014'
